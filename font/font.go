// Copyright Â© 2025 Alex Temnok. All rights reserved.

package font

import (
	"math"
	"temnok/pcbc/path"
	"temnok/pcbc/transform"
)

type Align float64

const (
	Width = 0.65 // relative to height 1.0

	weightScale = 1.0 / 5000.0
	Normal      = 400 * weightScale
	SemiBold    = 600 * weightScale
	Bold        = 700 * weightScale

	AlignLeft   Align = 0.0
	AlignCenter Align = 0.5
	AlignRight  Align = 1.0
)

/*

Vector (linear) font matrix. Data below uses its point numbers.
Negative number means jump (no line) before it.

Examples:
	'Q': {4, 8, 19, 39, 48, 44, 33, 13, 4, -24, 42},
	'q': {41, 47, 17, 6, 4, 13, 43},

09 19 29 39 49
08 18 28 38 48
07 17 27 37 47
06 16 26 36 46
05 15 25 35 45
04 14 24 34 44
03 13 23 33 43
02 12 22 32 42
01 11 21 31 41
00 10 20 30 40

*/

var data = [][]int8{
	// 0x20
	' ':  {},
	'!':  {23, -25, 29},
	'"':  {17, 19, -37, 39},
	'#':  {5, 45, -7, 47, -13, 19, -33, 39},
	'$':  {3, 12, 32, 43, 44, 35, 15, 6, 7, 18, 38, 47, -21, 29},
	'%':  {9, 19, 18, 8, 9, -34, 44, 43, 33, 34, -3, 49},
	'&':  {43, 8, 19, 29, 38, 5, 4, 13, 23, 45},
	'\'': {27, 29},
	'(':  {23, 15, 17, 29},
	')':  {23, 35, 37, 29},
	'*':  {6, 48, -8, 46, -25, 29},
	'+':  {6, 46, -24, 28},
	',':  {11, 23},
	'-':  {6, 46},
	'.':  {23},
	'/':  {3, 49},

	// 0x30
	'0': {4, 8, 19, 39, 48, 44, 33, 13, 4, -5, 15, 37, 47},
	'1': {3, 43, -7, 29, 23},
	'2': {8, 19, 39, 48, 47, 3, 43},
	'3': {4, 13, 33, 44, 45, 36, 26, 36, 47, 48, 39, 19, 8},
	'4': {29, 5, 45, -43, 47},
	'5': {3, 33, 44, 45, 36, 6, 9, 49},
	'6': {6, 36, 45, 44, 33, 13, 4, 6, 29},
	'7': {9, 49, 13},
	'8': {16, 7, 8, 19, 39, 48, 47, 36, 16, 5, 4, 13, 33, 44, 45, 36},
	'9': {23, 46, 48, 39, 19, 8, 7, 16, 46},

	':': {23, -28},
	';': {11, 23, -28},
	'<': {43, 6, 49},
	'=': {5, 45, -7, 47},
	'>': {3, 46, 9},
	'?': {8, 19, 39, 48, 47, 25, -23},

	// 0x40
	'@': {33, 13, 4, 8, 19, 39, 48, 45, 25, 27, 47},
	'A': {3, 8, 19, 39, 48, 43, -6, 46},
	'B': {6, 36, 47, 48, 39, 9, 3, 33, 44, 45, 36},
	'C': {44, 33, 13, 4, 8, 19, 39, 48},
	'D': {3, 9, 39, 48, 44, 33, 3},
	'E': {6, 36, -43, 3, 9, 49},
	'F': {3, 9, 49, -6, 36},
	'G': {26, 46, 44, 33, 13, 4, 8, 19, 29, 39, 48},
	'H': {6, 46, -3, 9, -43, 49},
	'I': {3, 43, -9, 49, -23, 29},
	'J': {5, 4, 13, 33, 44, 49, 9},
	'K': {6, 16, 49, -3, 9, -16, 43},
	'L': {9, 3, 43},
	'M': {3, 9, 26, 49, 43},
	'N': {3, 9, 43, 49},
	'O': {4, 8, 19, 39, 48, 44, 33, 13, 4},
	'P': {3, 9, 39, 48, 47, 36, 6},
	'Q': {4, 8, 19, 39, 48, 44, 33, 13, 4, -24, 42},
	'R': {3, 9, 39, 48, 47, 36, 6, -16, 43},
	'S': {4, 13, 33, 44, 45, 36, 16, 7, 8, 19, 39, 48},
	'T': {9, 49, -23, 29},
	'U': {9, 4, 13, 33, 44, 49},
	'V': {9, 23, 49},
	'W': {9, 13, 29, 33, 49},
	'X': {9, 43, -3, 49},
	'Y': {9, 26, 49, -23, 26},
	'Z': {9, 49, 3, 43},

	'[':  {33, 13, 19, 39},
	'\\': {9, 43},
	']':  {13, 33, 39, 19},
	'^':  {7, 29, 47},
	'_':  {3, 43},
	'`':  {19, 28},

	// 0x60
	'a': {43, 13, 4, 6, 17, 47, 43},
	'b': {7, 37, 46, 44, 33, 3, 9},
	'c': {43, 13, 4, 6, 17, 47},
	'd': {47, 17, 6, 4, 13, 43, 49},
	'e': {5, 45, 46, 37, 17, 6, 4, 13, 43},
	'f': {6, 46, -23, 28, 39, 49},
	'g': {11, 31, 42, 47, 17, 6, 5, 14, 44},
	'h': {7, 37, 46, 43, -3, 9},
	'i': {3, 43, -17, 27, 23, -29},
	'j': {1, 21, 32, 37, 17, -39},
	'k': {5, 25, 47, -3, 9, -25, 43},
	'l': {9, 19, 14, 23, 43},
	'm': {3, 7, 37, 46, 43, -23, 27},
	'n': {3, 7, 37, 46, 43},
	'o': {4, 6, 17, 37, 46, 44, 33, 13, 4},
	'p': {1, 7, 37, 46, 44, 33, 3},
	'q': {41, 47, 17, 6, 4, 13, 43},
	'r': {3, 7, 37, 46},
	's': {3, 33, 44, 35, 15, 6, 17, 47},
	't': {7, 47, -29, 24, 33, 43},
	'u': {7, 4, 13, 33, 44, 47},
	'v': {7, 23, 47},
	'w': {7, 13, 27, 33, 47},
	'x': {7, 43, -3, 47},
	//	'y': {7, 5, 14, 44, -11, 31, 42, 47},
	'y': {7, 24, -11, 47},
	'z': {7, 47, 3, 43},

	'{': {16, 27, 28, 39, -6, 16, 25, 24, 33},
	'|': {23, 29},
	'}': {19, 28, 27, 36, 46, -13, 24, 25, 36},
	'~': {6, 17, 35, 46},
}

var dataOld = [][]int8{
	// 0x20
	' ':  {},
	'!':  {13, 53, -73},
	'"':  {12, 32, -14, 34},
	'#':  {12, 72, -14, 74, -31, 35, -51, 55},
	'$':  {71, 82, 84, 75, 65, 54, 52, 41, 31, 22, 24, 35, -13, 93},
	'%':  {11, 12, 22, 21, 11, -15, 71, -64, 65, 75, 74, 64},
	'&':  {75, 21, 12, 13, 24, 51, 61, 72, 73, 55},
	'\'': {13, 33},
	'(':  {73, 52, 32, 13},
	')':  {13, 34, 54, 73},
	'*':  {13, 53, -21, 45, -41, 25},
	'+':  {23, 63, -41, 45},
	',':  {73, 92},
	'-':  {41, 45},
	'.':  {73},
	'/':  {15, 71},

	// 0x30
	'0': {61, 21, 12, 14, 25, 65, 74, 72, 61, -51, 52, 34, 35},
	'1': {31, 13, 73, -71, 75},
	'2': {21, 12, 14, 25, 35, 71, 75},
	'3': {21, 12, 14, 25, 35, 44, 43, 44, 55, 65, 74, 72, 61},
	'4': {13, 51, 55, -35, 75},
	'5': {15, 11, 41, 44, 55, 65, 74, 71},
	'6': {13, 41, 61, 72, 74, 65, 55, 44, 41},
	'7': {11, 15, 72},
	'8': {42, 31, 21, 12, 14, 25, 35, 44, 42, 51, 61, 72, 74, 65, 55, 44},
	'9': {45, 42, 31, 21, 12, 14, 25, 45, 73},

	':': {23, -73},
	';': {23, -73, 92},
	'<': {75, 41, 15},
	'=': {31, 35, -51, 55},
	'>': {11, 45, 71},
	'?': {21, 12, 14, 25, 35, 53, -73},

	// 0x40
	'@': {74, 72, 61, 21, 12, 14, 25, 55, 53, 33, 35},
	'A': {71, 21, 12, 14, 25, 75, -41, 45},
	'B': {41, 44, 35, 25, 14, 11, 71, 74, 65, 55, 44},
	'C': {25, 14, 12, 21, 61, 72, 74, 65},
	'D': {71, 11, 14, 25, 65, 74, 71},
	'E': {75, 71, 11, 15, -41, 44},
	'F': {71, 11, 15, -41, 44},
	'G': {43, 45, 65, 74, 72, 61, 21, 12, 13, 14, 25},
	'H': {11, 71, -15, 75, -41, 45},
	'I': {13, 73, -11, 15, -71, 75},
	'J': {11, 15, 65, 74, 72, 61, 51},
	'K': {11, 71, -41, 42, 15, -42, 75},
	'L': {11, 71, 75},
	'M': {71, 11, 43, 15, 75},
	'N': {71, 11, 75, 15},
	'O': {61, 21, 12, 14, 25, 65, 74, 72, 61},
	'P': {71, 11, 14, 25, 35, 44, 41},
	'Q': {61, 21, 12, 14, 25, 65, 74, 72, 61, -63, 85},
	'R': {71, 11, 14, 25, 35, 44, 41, -42, 75},
	'S': {25, 14, 12, 21, 31, 42, 44, 55, 65, 74, 72, 61},
	'T': {11, 15, -13, 73},
	'U': {11, 61, 72, 74, 65, 15},
	'V': {11, 73, 15},
	'W': {11, 72, 13, 74, 15},
	'X': {11, 75, -15, 71},
	'Y': {11, 43, 15, -43, 73},
	'Z': {11, 15, 71, 75},

	'[':  {74, 72, 12, 14},
	'\\': {11, 75},
	']':  {12, 14, 74, 72},
	'^':  {31, 13, 35},
	'_':  {71, 75},

	// 0x60
	'`': {12, 23},
	'a': {75, 72, 61, 41, 32, 35, 75},
	'b': {31, 34, 45, 65, 74, 71, 11},
	'c': {75, 72, 61, 41, 32, 35},
	'd': {15, 75, 72, 61, 41, 32, 35},
	'e': {75, 72, 61, 41, 32, 34, 45, 55, 51},
	'f': {15, 14, 23, 73, -41, 45},
	'g': {65, 62, 51, 41, 32, 35, 85, 94, 92},
	'h': {11, 71, -31, 34, 45, 75},
	'i': {32, 33, 73, -71, 75, -13},
	'j': {32, 34, 84, 93, 91, -14},
	'k': {11, 71, -51, 53, 35, -53, 75},
	'l': {11, 12, 62, 73, 75},
	'm': {71, 31, 34, 45, 75, -33, 73},
	'n': {71, 31, 34, 45, 75},
	'o': {61, 41, 32, 34, 45, 65, 74, 72, 61},
	'p': {91, 31, 34, 45, 65, 74, 71},
	'q': {75, 72, 61, 41, 32, 35, 95},
	'r': {71, 31, 34, 45},
	's': {71, 74, 65, 54, 52, 41, 32, 35},
	't': {13, 63, 74, 75, -31, 35},
	'u': {31, 61, 72, 74, 65, 35},
	'v': {31, 73, 35},
	'w': {31, 72, 33, 74, 35},
	'x': {31, 75, -35, 71},
	'y': {35, 85, 94, 92, -65, 62, 51, 31},
	'z': {31, 35, 71, 75},

	'{': {74, 63, 53, 42, 41, -42, 33, 23, 14},
	'|': {13, 73},
	'}': {12, 23, 33, 44, 45, -44, 53, 63, 72},
	'~': {41, 32, 54, 45},
}

var symbolPaths = [256]path.Paths{}

func Centered(str string) path.Paths {
	return alignedText(AlignCenter, path.Point{}, str)
}

func CenteredRow(dx float64, strs ...string) path.Paths {
	return alignedText(AlignCenter, path.Point{X: dx}, strs...)
}

func CenteredColumn(dy float64, strs ...string) path.Paths {
	return alignedText(AlignCenter, path.Point{Y: dy}, strs...)
}

func AlignedColumn(align Align, dy float64, strs ...string) path.Paths {
	return alignedText(align, path.Point{Y: dy}, strs...)
}

func alignedText(align Align, shift path.Point, strs ...string) path.Paths {
	var paths path.Paths

	x0, y0 := -0.5*float64(len(strs)-1)*shift.X, -0.5*float64(len(strs)-1)*shift.Y
	for i, str := range strs {
		i := float64(i)
		p := alignedPaths(align, str).Apply(transform.Move(x0+i*shift.X, y0+i*shift.Y))
		paths = append(paths, p...)
	}

	return paths
}

func alignedPaths(align Align, str string) path.Paths {
	var paths path.Paths

	n := float64(len(str))
	for i, c := range str {
		c := int(c)
		if c >= len(symbolPaths) {
			c = '?'
		}

		t := transform.Move(Width*(float64(i)-n*float64(align)), 0.4)
		paths = append(paths, symbolPaths[c].Apply(t)...)
	}

	return paths
}

func init() {
	for i, p := range data {
		var symbolPath []path.Point

		for _, point := range p {
			if point < 0 { // jump without line
				symbolPaths[i] = append(symbolPaths[i], symbolPath)
				symbolPath = nil
				point = -point
			}

			a := pToXY(point)
			if symbolPath == nil {
				symbolPath = []path.Point{a}
			} else {
				symbolPath = append(symbolPath, symbolPath[len(symbolPath)-1], a, a)
			}
		}

		symbolPaths[i] = append(symbolPaths[i], symbolPath)
	}
}

func WeightScale(t transform.T) float64 {
	return min(math.Sqrt(t.Ix*t.Ix+t.Iy*t.Iy), math.Sqrt(t.Jx*t.Jx+t.Jy*t.Jy))
}

func pToXY(p int8) path.Point {
	return path.Point{
		X: float64(p/10)/10.0 + 0.1,
		Y: float64(p%10)/10.0 - 1,
	}
}
