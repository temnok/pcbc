// Copyright Â© 2025 Alex Temnok. All rights reserved.

package font

import (
	"math"
	"temnok/pcbc/path"
	"temnok/pcbc/transform"
)

type Align float64

const (
	Width = 0.65 // relative to height 1.0

	weightScale = 1.0 / 5000.0
	Normal      = 400 * weightScale
	SemiBold    = 600 * weightScale
	Bold        = 700 * weightScale

	AlignLeft   Align = 0.0
	AlignCenter Align = 0.5
	AlignRight  Align = 1.0
)

/*

Vector (linear) font matrix. Data below uses its point numbers.
Negative number means jump (no line) before it.

Examples:
	'Q': {4, 8, 19, 39, 48, 44, 33, 13, 4, -24, 42},
	'q': {41, 47, 17, 6, 4, 13, 43},

08 18 28 38 48
07 17 27 37 47
06 16 26 36 46
05 15 25 35 45
04 14 24 34 44
03 13 23 33 43
02 12 22 32 42
01 11 21 31 41
00 10 20 30 40

*/

var data = [][]int8{
	// 0x20
	' ':  {},
	'!':  {22, -24, 28},
	'"':  {16, 18, -36, 38},
	'#':  {4, 44, -6, 46, -12, 18, -32, 38},
	'$':  {2, 11, 31, 42, 43, 34, 14, 5, 6, 17, 37, 46, -20, 28},
	'%':  {2, 48, -8, 18, 17, 7, 8, -33, 43, 42, 32, 33},
	'&':  {42, 7, 18, 28, 37, 4, 3, 12, 22, 44},
	'\'': {26, 28},
	'(':  {22, 14, 16, 28},
	')':  {22, 34, 36, 28},
	'*':  {5, 47, -7, 45, -24, 28},
	'+':  {5, 45, -23, 27},
	',':  {10, 22},
	'-':  {5, 45},
	'.':  {22},
	'/':  {2, 48},

	// 0x30
	'0': {3, 7, 18, 38, 47, 43, 32, 12, 3, -4, 14, 36, 46},
	'1': {2, 42, -6, 28, 22},
	'2': {7, 18, 38, 47, 46, 2, 42},
	'3': {3, 12, 32, 43, 44, 35, 25, 35, 46, 47, 38, 18, 7},
	'4': {28, 4, 44, -42, 46},
	'5': {2, 32, 43, 44, 35, 5, 8, 48},
	'6': {5, 35, 44, 43, 32, 12, 3, 5, 28},
	'7': {8, 48, 12},
	'8': {15, 6, 7, 18, 38, 47, 46, 35, 15, 4, 3, 12, 32, 43, 44, 35},
	'9': {22, 45, 47, 38, 18, 7, 6, 15, 45},

	':': {22, -27},
	';': {10, 22, -27},
	'<': {42, 5, 48},
	'=': {4, 44, -6, 46},
	'>': {2, 45, 8},
	'?': {7, 18, 38, 47, 46, 24, -22},

	// 0x40
	'@': {32, 12, 3, 7, 18, 38, 47, 44, 24, 26, 46},
	'A': {2, 7, 18, 38, 47, 42, -5, 45},
	'B': {5, 35, 46, 47, 38, 8, 2, 32, 43, 44, 35},
	'C': {43, 32, 12, 3, 7, 18, 38, 47},
	'D': {2, 8, 38, 47, 43, 32, 2},
	'E': {5, 35, -42, 2, 8, 48},
	'F': {2, 8, 48, -5, 35},
	'G': {25, 45, 43, 32, 12, 3, 7, 18, 28, 38, 47},
	'H': {2, 8, -5, 45, -42, 48},
	'I': {2, 42, -8, 48, -22, 28},
	'J': {4, 3, 12, 32, 43, 48, 8},
	'K': {2, 8, -5, 15, 48, -15, 42},
	'L': {8, 2, 42},
	'M': {2, 8, 25, 48, 42},
	'N': {2, 8, 42, 48},
	'O': {3, 7, 18, 38, 47, 43, 32, 12, 3},
	'P': {2, 8, 38, 47, 46, 35, 5},
	'Q': {3, 7, 18, 38, 47, 43, 32, 12, 3, -23, 41},
	'R': {2, 8, 38, 47, 46, 35, 5, -15, 42},
	'S': {3, 12, 32, 43, 44, 35, 15, 6, 7, 18, 38, 47},
	'T': {8, 48, -22, 28},
	'U': {8, 3, 12, 32, 43, 48},
	'V': {8, 22, 48},
	'W': {8, 12, 28, 32, 48},
	'X': {2, 48, -8, 42},
	'Y': {8, 25, 48, -22, 25},
	'Z': {8, 48, 2, 42},

	'[':  {32, 12, 18, 38},
	'\\': {8, 42},
	']':  {12, 32, 38, 18},
	'^':  {6, 28, 46},
	'_':  {2, 42},

	// 0x60
	'`': {18, 27},
	'a': {42, 12, 3, 5, 16, 46, 42},
	'b': {6, 36, 45, 43, 32, 2, 8},
	'c': {42, 12, 3, 5, 16, 46},
	'd': {46, 16, 5, 3, 12, 42, 48},
	'e': {4, 44, 45, 36, 16, 5, 3, 12, 42},
	'f': {5, 45, -22, 27, 38, 48},
	'g': {10, 30, 41, 46, 16, 5, 4, 13, 43},
	'h': {2, 8, -6, 36, 45, 42},
	'i': {2, 42, -16, 26, 22, -28},
	'j': {0, 20, 31, 36, 16, -38},
	'k': {2, 8, -4, 24, 46, -24, 42},
	'l': {8, 18, 13, 22, 42},
	'm': {2, 6, 36, 45, 42, -22, 26},
	'n': {2, 6, 36, 45, 42},
	'o': {3, 5, 16, 36, 45, 43, 32, 12, 3},
	'p': {0, 6, 36, 45, 43, 32, 2},
	'q': {40, 46, 16, 5, 3, 12, 42},
	'r': {2, 6, 36, 45},
	's': {2, 32, 43, 34, 14, 5, 16, 46},
	't': {6, 46, -28, 23, 32, 42},
	'u': {6, 3, 12, 32, 43, 46},
	'v': {6, 22, 46},
	'w': {6, 12, 26, 32, 46},
	'x': {2, 46, -6, 42},
	'y': {6, 23, -10, 46},
	'z': {6, 46, 2, 42},

	'{': {5, 15, 24, 23, 32, -15, 26, 27, 38},
	'|': {22, 28},
	'}': {12, 23, 24, 35, -18, 27, 26, 35, 45},
	'~': {5, 16, 34, 45},
}

var dataOld = [][]int8{
	// 0x20
	' ':  {},
	'!':  {13, 53, -73},
	'"':  {12, 32, -14, 34},
	'#':  {12, 72, -14, 74, -31, 35, -51, 55},
	'$':  {71, 82, 84, 75, 65, 54, 52, 41, 31, 22, 24, 35, -13, 93},
	'%':  {11, 12, 22, 21, 11, -15, 71, -64, 65, 75, 74, 64},
	'&':  {75, 21, 12, 13, 24, 51, 61, 72, 73, 55},
	'\'': {13, 33},
	'(':  {73, 52, 32, 13},
	')':  {13, 34, 54, 73},
	'*':  {13, 53, -21, 45, -41, 25},
	'+':  {23, 63, -41, 45},
	',':  {73, 92},
	'-':  {41, 45},
	'.':  {73},
	'/':  {15, 71},

	// 0x30
	'0': {61, 21, 12, 14, 25, 65, 74, 72, 61, -51, 52, 34, 35},
	'1': {31, 13, 73, -71, 75},
	'2': {21, 12, 14, 25, 35, 71, 75},
	'3': {21, 12, 14, 25, 35, 44, 43, 44, 55, 65, 74, 72, 61},
	'4': {13, 51, 55, -35, 75},
	'5': {15, 11, 41, 44, 55, 65, 74, 71},
	'6': {13, 41, 61, 72, 74, 65, 55, 44, 41},
	'7': {11, 15, 72},
	'8': {42, 31, 21, 12, 14, 25, 35, 44, 42, 51, 61, 72, 74, 65, 55, 44},
	'9': {45, 42, 31, 21, 12, 14, 25, 45, 73},

	':': {23, -73},
	';': {23, -73, 92},
	'<': {75, 41, 15},
	'=': {31, 35, -51, 55},
	'>': {11, 45, 71},
	'?': {21, 12, 14, 25, 35, 53, -73},

	// 0x40
	'@': {74, 72, 61, 21, 12, 14, 25, 55, 53, 33, 35},
	'A': {71, 21, 12, 14, 25, 75, -41, 45},
	'B': {41, 44, 35, 25, 14, 11, 71, 74, 65, 55, 44},
	'C': {25, 14, 12, 21, 61, 72, 74, 65},
	'D': {71, 11, 14, 25, 65, 74, 71},
	'E': {75, 71, 11, 15, -41, 44},
	'F': {71, 11, 15, -41, 44},
	'G': {43, 45, 65, 74, 72, 61, 21, 12, 13, 14, 25},
	'H': {11, 71, -15, 75, -41, 45},
	'I': {13, 73, -11, 15, -71, 75},
	'J': {11, 15, 65, 74, 72, 61, 51},
	'K': {11, 71, -41, 42, 15, -42, 75},
	'L': {11, 71, 75},
	'M': {71, 11, 43, 15, 75},
	'N': {71, 11, 75, 15},
	'O': {61, 21, 12, 14, 25, 65, 74, 72, 61},
	'P': {71, 11, 14, 25, 35, 44, 41},
	'Q': {61, 21, 12, 14, 25, 65, 74, 72, 61, -63, 85},
	'R': {71, 11, 14, 25, 35, 44, 41, -42, 75},
	'S': {25, 14, 12, 21, 31, 42, 44, 55, 65, 74, 72, 61},
	'T': {11, 15, -13, 73},
	'U': {11, 61, 72, 74, 65, 15},
	'V': {11, 73, 15},
	'W': {11, 72, 13, 74, 15},
	'X': {11, 75, -15, 71},
	'Y': {11, 43, 15, -43, 73},
	'Z': {11, 15, 71, 75},

	'[':  {74, 72, 12, 14},
	'\\': {11, 75},
	']':  {12, 14, 74, 72},
	'^':  {31, 13, 35},
	'_':  {71, 75},

	// 0x60
	'`': {12, 23},
	'a': {75, 72, 61, 41, 32, 35, 75},
	'b': {31, 34, 45, 65, 74, 71, 11},
	'c': {75, 72, 61, 41, 32, 35},
	'd': {15, 75, 72, 61, 41, 32, 35},
	'e': {75, 72, 61, 41, 32, 34, 45, 55, 51},
	'f': {15, 14, 23, 73, -41, 45},
	'g': {65, 62, 51, 41, 32, 35, 85, 94, 92},
	'h': {11, 71, -31, 34, 45, 75},
	'i': {32, 33, 73, -71, 75, -13},
	'j': {32, 34, 84, 93, 91, -14},
	'k': {11, 71, -51, 53, 35, -53, 75},
	'l': {11, 12, 62, 73, 75},
	'm': {71, 31, 34, 45, 75, -33, 73},
	'n': {71, 31, 34, 45, 75},
	'o': {61, 41, 32, 34, 45, 65, 74, 72, 61},
	'p': {91, 31, 34, 45, 65, 74, 71},
	'q': {75, 72, 61, 41, 32, 35, 95},
	'r': {71, 31, 34, 45},
	's': {71, 74, 65, 54, 52, 41, 32, 35},
	't': {13, 63, 74, 75, -31, 35},
	'u': {31, 61, 72, 74, 65, 35},
	'v': {31, 73, 35},
	'w': {31, 72, 33, 74, 35},
	'x': {31, 75, -35, 71},
	'y': {35, 85, 94, 92, -65, 62, 51, 31},
	'z': {31, 35, 71, 75},

	'{': {74, 63, 53, 42, 41, -42, 33, 23, 14},
	'|': {13, 73},
	'}': {12, 23, 33, 44, 45, -44, 53, 63, 72},
	'~': {41, 32, 54, 45},
}

var symbolPaths = [256]path.Paths{}

func Centered(str string) path.Paths {
	return alignedText(AlignCenter, path.Point{}, str)
}

func CenteredRow(dx float64, strs ...string) path.Paths {
	return alignedText(AlignCenter, path.Point{X: dx}, strs...)
}

func CenteredColumn(dy float64, strs ...string) path.Paths {
	return alignedText(AlignCenter, path.Point{Y: dy}, strs...)
}

func AlignedColumn(align Align, dy float64, strs ...string) path.Paths {
	return alignedText(align, path.Point{Y: dy}, strs...)
}

func alignedText(align Align, shift path.Point, strs ...string) path.Paths {
	var paths path.Paths

	x0, y0 := -0.5*float64(len(strs)-1)*shift.X, -0.5*float64(len(strs)-1)*shift.Y
	for i, str := range strs {
		i := float64(i)
		p := alignedPaths(align, str).Apply(transform.Move(x0+i*shift.X, y0+i*shift.Y))
		paths = append(paths, p...)
	}

	return paths
}

func alignedPaths(align Align, str string) path.Paths {
	var paths path.Paths

	n := float64(len(str))
	for i, c := range str {
		c := int(c)
		if c >= len(symbolPaths) {
			c = '?'
		}

		t := transform.Move(Width*(float64(i)-n*float64(align)), 0.4)
		paths = append(paths, symbolPaths[c].Apply(t)...)
	}

	return paths
}

func init() {
	for i, p := range data {
		var symbolPath []path.Point

		for _, point := range p {
			if point < 0 { // jump without line
				symbolPaths[i] = append(symbolPaths[i], symbolPath)
				symbolPath = nil
				point = -point
			}

			a := pToXY(point)
			if symbolPath == nil {
				symbolPath = []path.Point{a}
			} else {
				symbolPath = append(symbolPath, symbolPath[len(symbolPath)-1], a, a)
			}
		}

		symbolPaths[i] = append(symbolPaths[i], symbolPath)
	}
}

func WeightScale(t transform.T) float64 {
	return min(math.Sqrt(t.Ix*t.Ix+t.Iy*t.Iy), math.Sqrt(t.Jx*t.Jx+t.Jy*t.Jy))
}

func pToXY(p int8) path.Point {
	return path.Point{
		X: float64(p/10)/10.0 + 0.1,
		Y: float64(p%10)/10.0 - 0.9,
	}
}
